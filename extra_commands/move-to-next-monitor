#!/bin/bash
#
# Move the current window to the next monitor.
#
# Only works on a horizontal monitor setup.
# Also works only on one X screen (which is the most common case).
#
# Props to
# http://icyrock.com/blog/2012/05/xubuntu-moving-windows-between-monitors/
#
# Unfortunately, both "xdotool getwindowgeometry --shell $window_id" and
# checking "-geometry" of "xwininfo -id $window_id" are not sufficient, as
# the first command does not respect panel/decoration offsets and the second
# will sometimes give a "-0-0" geometry. This is why we resort to "xwininfo".

# Get the screens connected to the computer
number_screens=`xrandr | awk 'BEGIN{a = 0} / connected/{ a = a + 1} END{print a}'`
data_screens=`xrandr | awk '/ connected/{print}' | awk '{ for (i=1; i<=NF; i++) { tmp=match($i, /[0-9]x[0-9]/); if(tmp){print $i} } }'`

declare -A all_screens

# Input all the data from the screens into an array.
#
# Ex: 1366x768+0+0 which is width x height + x_offset + y_offset
for (( i=0; i<$number_screens; i++)); do
  width=`echo $data_screens | awk screen=$i+1'{print $screen}' | awk 'BEGIN{FS="x"} {print $1}'`
  height=`echo $data_screens | awk screen=$i+1'{print $screen}' | awk 'BEGIN{FS="x"} {print $2}' | awk 'BEGIN{FS="+"} {print $1}' `
  x_offset=`echo $data_screens | awk screen=$i+1'{print $screen}' | awk 'BEGIN{FS="x"} {print $2}' | awk 'BEGIN{FS="+"} {print $2}' `
  y_offset=`echo $data_screens | awk screen=$i+1'{print $screen}' | awk 'BEGIN{FS="x"} {print $2}' | awk 'BEGIN{FS="+"} {print $3}' `

  #echo "w:" $width
  #echo "h:" $height
  #echo "x:" $x_offset
  #echo "y:" $y_offset

  all_screens[$i,0]=$width
  all_screens[$i,1]=$height
  all_screens[$i,2]=$x_offset
  all_screens[$i,3]=$y_offset
done

window_id=`xdotool getactivewindow`

# Remember if it was maximized.
window_state=`xprop -id $window_id _NET_WM_STATE | awk '{ print $3 }'`
# Un-maximize current window so that we can move it
wmctrl -ir $window_id -b remove,maximized_vert,maximized_horz

# Read window position
x=`xwininfo -id $window_id | awk '/Absolute upper-left X:/ { print $4 }'`
y=`xwininfo -id $window_id | awk '/Absolute upper-left Y:/ { print $4 }'`

# Subtract any offsets caused by panels or window decorations
x_offset=`xwininfo -id $window_id | awk '/Relative upper-left X:/ { print $4 }'`
y_offset=`xwininfo -id $window_id | awk '/Relative upper-left Y:/ { print $4 }'`
x=`expr $x - $x_offset`
y=`expr $y - $y_offset`
#echo "x" $x
#echo "y" $y

# Find out in which monitor the window is
for (( i=0; i<$number_screens; i++)); do
  lower_x=`expr $x - ${all_screens[$i,2]}`
  higher_x=`expr ${all_screens[$i,0]} + ${all_screens[$i,2]} - $x`
  lower_y=`expr $y - ${all_screens[$i,3]}`
  higher_y=`expr ${all_screens[$i,1]} + ${all_screens[$i,3]} - $y`

  #echo "width" ${all_screens[$i,0]}
  #echo "x offset" ${all_screens[$i,2]}
  #echo "height" ${all_screens[$i,1]}
  #echo "y_offset" ${all_screens[$i,3]}
  #echo "lower_x" $lower_x
  #echo "higher_x" $higher_x
  #echo "lower_y" $lower_y
  #echo "higher_y" $higher_y

  if [ "$lower_x" -gt "0" ] && [ "$higher_x" -gt "0" ] &&
     [ "$lower_y" -gt "0" ] && [ "$higher_y" -gt "0" ]; then
    prev_screen=$i
    break
  fi

done

# Decide in which new screen it should go
new_screen=`expr $prev_screen + 1`
if [ "$new_screen" -eq "$number_screens" ]; then
  new_screen=0
fi
#echo "prev" $prev_screen
#echo "new"  $new_screen

# Calculate the new coordinates
new_x=`expr $x - ${all_screens[$prev_screen,2]} + ${all_screens[$new_screen,2]}`
new_y=`expr $y - ${all_screens[$prev_screen,3]} + ${all_screens[$new_screen,3]}`
#echo "nex x" $new_x
#echo "new y" $new_y

# Move the window
xdotool windowmove $window_id $new_x $new_y

# Maximize window again, if it was before
if [ -n "${window_state}" ]; then
  wmctrl -ir $window_id -b add,maximized_vert,maximized_horz
fi
